/**
 *  Copyright: (C) 2013 by Agustin Alvarez.
 *            All rights reserved
 *
 * License: Boost Software License version 1.0
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include <GhrumAPI/GhrumAPI.hpp>

/**
 * Function that run in every tick
 */
void runEveryTick() {
    // Do something here....
}

/**
 * Function that run one time after 10 minutes.
 */
void runOneShotAfter10Minutes() {
}

/**
 * Function called when the plugin has been enabled.
 *
 * @param plugin reference to this plugin
 */
EXPORT void onPluginEnable(Ghrum::IPlugin & plugin) {
    // Run a member function of an instance, in this case, a task
    // will just call getName() from Ghrum::IPlugin of plugin
    auto memberToFunction(Delegate<void()>(plugin, &getName));
    Ghrum::GhrumAPI::getScheduler().syncTask(plugin, memberToFunction);

    // Run a lamba task one time with default priority.
    auto lambda(Delegate<void ()>([&]() {
        // Do something here.
    }));
    Ghrum::GhrumAPI::getScheduler().syncTask(plugin, lamda);

    // Run a delayed task after 10 minutes.
    Ghrum::GhrumAPI::getScheduler().syncDelayedTask(plugin, runOneShotAfter10Minutes,
        Ghrum::EventPriority::Monitor, 20 * (1000 * 1000 * 10));

    // Run a task every tick.
    Ghrum::GhrumAPI::getScheduler().syncRepeatingTask(plugin, runEveryTick,
        Ghrum::EventPriority::Monitor, 0, 1);
}